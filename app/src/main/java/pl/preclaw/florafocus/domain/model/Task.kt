package pl.preclaw.florafocus.domain.model

/**
 * Domain model for Task
 */
data class Task(
    val id: String,
    val userId: String,
    val title: String,
    val description: String?,
    val taskType: TaskType,        // ✅ Domain enum
    val priority: TaskPriority,    // ✅ Domain enum

    // Scheduling
    val dueDate: Long,
    val dueTime: String?, // HH:mm format
    val isAllDay: Boolean,

    // Plant association
    val associatedPlantId: String?,
    val associatedBedId: String?,

    // Location fields (for use cases)
    val locationId: String?,      // ✅ DODANE - bedId or areaId
    val locationName: String?,    // ✅ DODANE - cached location name

    // Status
    val completed: Boolean = false,
    val completedDate: Long? = null,

    // Recurrence
    val isRecurring: Boolean = false,
    val recurringTemplateId: String? = null,

    // Generation
    val isAutoGenerated: Boolean = false,
    val generatedFromPhaseId: String?,

    // Weather dependency
    val weatherDependent: Boolean,
    val idealWeatherConditions: List<WeatherCondition>?,
    val linkedPlantId: String? = null,
    val linkedPhaseId: String? = null,

    // Metadata
    val imageUrls: List<String> = emptyList(),
    val notes: String? = null,
    val createdAt: Long,
    val updatedAt: Long
)

/**
 * Recurring task template
 */
data class RecurringTaskTemplate(
    val id: String,
    val userId: String,
    val templateName: String,
    val taskType: TaskType,        // ✅ Domain enum
    val title: String,
    val description: String?,
    val priority: TaskPriority,    // ✅ Domain enum

    // Recurrence pattern
    val recurrencePattern: pl.preclaw.florafocus.domain.model.RecurrencePattern,
    val startDate: Long,
    val endDate: Long?,

    // Plant association
    val associatedPlantId: String?,
    val associatedBedId: String?,

    // Status
    val isActive: Boolean,
    val lastGeneratedDate: Long?,

    val createdAt: Long,
    val updatedAt: Long
)

/**
 * Recurrence pattern
 */
data class RecurrencePattern(
    val frequency: RecurrenceFrequency,
    val interval: Int,
    val daysOfWeek: List<DayOfWeek>?,  // ✅ public data class
    val dayOfMonth: Int?,
    val timeOfDay: String?
)

/**
 * Weather condition for task scheduling
 */
data class WeatherCondition(
    val condition: String, // "sunny", "cloudy", "rainy"
    val temperatureRange: Pair<Float, Float>?,
    val precipitationMax: Float?
)

// ==================== ENUMS ====================

enum class RecurrenceFrequency {
    DAILY,
    WEEKLY,
    MONTHLY,
    YEARLY,
    CUSTOM
}

enum class DayOfWeek {
    MONDAY,
    TUESDAY,
    WEDNESDAY,
    THURSDAY,
    FRIDAY,
    SATURDAY,
    SUNDAY
}