package pl.preclaw.florafocus.data.local.entities

import androidx.room.Entity
import androidx.room.ForeignKey
import androidx.room.Index
import androidx.room.PrimaryKey
import androidx.room.TypeConverters
import pl.preclaw.florafocus.data.local.database.Converters

/**
 * Task entity for garden activities
 * 
 * Represents both user-created and auto-generated tasks
 * Can be linked to specific plants or be general garden tasks
 */
@Entity(
    tableName = "tasks",
    foreignKeys = [
        ForeignKey(
            entity = UserPlantEntity::class,
            parentColumns = ["id"],
            childColumns = ["plantId"],
            onDelete = ForeignKey.CASCADE
        )
    ],
    indices = [
        Index("userId"),
        Index("plantId"),
        Index("dueDate"),
        Index("isCompleted"),
        Index("locationId")
    ]
)
@TypeConverters(Converters::class)
data class TaskEntity(
    @PrimaryKey
    val id: String,
    
    val userId: String,
    val plantId: String?, // Optional - link to specific plant
    
    // Task details
    val title: String,
    val description: String?,
    
    // Scheduling
    val dueDate: Long,
    val dueDateFlexible: Boolean = false, // Can system reschedule based on weather?
    val originalDueDate: Long? = null, // Original date before auto-rescheduling
    
    val completedDate: Long?,
    val isCompleted: Boolean = false,
    
    // Recurrence
    val isRecurring: Boolean = false,
    val recurrencePattern: RecurrencePattern? = null,
    val recurrenceIntervalDays: Int? = null, // For custom patterns
    
    // Priority & categorization
    val priority: TaskPriority = TaskPriority.MEDIUM,
    val taskType: TaskType,
    
    // Auto-generation metadata
    val autoGenerated: Boolean = false,
    val generatedByPhaseId: String?, // Which growth phase triggered this task
    val weatherDependent: Boolean = false,
    
    // Location for grouping
    val locationId: String?, // bedId or areaId for task grouping
    val locationName: String?, // Cached location name
    
    // Assignment (for multi-user in future)
    val assignedTo: String? = null,
    
    // Reminders
    val reminderEnabled: Boolean = true,
    val reminderTimeBefore: Int? = null, // Minutes before due date
    
    // Notes
    val notes: String?,
    val imageUrls: List<String> = emptyList(),
    
    // Metadata
    val createdAt: Long = System.currentTimeMillis(),
    val updatedAt: Long = System.currentTimeMillis()
)

/**
 * Template for recurring tasks
 * Stores the pattern for generating future task instances
 */
@Entity(
    tableName = "recurring_task_templates",
    indices = [Index("userId")]
)
@TypeConverters(Converters::class)
data class RecurringTaskTemplateEntity(
    @PrimaryKey
    val id: String,
    
    val userId: String,
    val plantId: String?,
    
    val title: String,
    val description: String?,
    val taskType: TaskType,
    val priority: TaskPriority,
    
    val recurrencePattern: RecurrencePattern,
    val recurrenceIntervalDays: Int? = null,
    
    val startDate: Long,
    val endDate: Long?, // Optional end date for the recurrence
    
    val lastGeneratedDate: Long?, // Last date a task instance was created
    val isActive: Boolean = true,
    
    val createdAt: Long = System.currentTimeMillis(),
    val updatedAt: Long = System.currentTimeMillis()
)

// ==================== ENUMS ====================

enum class RecurrencePattern {
    DAILY,
    EVERY_2_DAYS,
    EVERY_3_DAYS,
    TWICE_WEEKLY,
    WEEKLY,
    BIWEEKLY,
    MONTHLY,
    SEASONAL,
    YEARLY,
    CUSTOM // Use recurrenceIntervalDays
}
