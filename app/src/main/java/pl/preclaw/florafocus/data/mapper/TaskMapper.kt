package pl.preclaw.florafocus.data.mapper

import pl.preclaw.florafocus.data.local.entities.*
import pl.preclaw.florafocus.domain.model.*

object TaskMapper {

    fun toDomain(entity: TaskEntity): Task {
        return Task(
            id = entity.id,
            userId = entity.userId,
            title = entity.title,
            description = entity.description,
            taskType = entity.taskType.toDomain(),
            priority = entity.priority.toDomain(),
            dueDate = entity.dueDate,
            dueTime = entity.dueTime,
            isAllDay = entity.isAllDay,
            associatedPlantId = entity.associatedPlantId,
            associatedBedId = entity.associatedBedId,
            completed = entity.completed,
            completedDate = entity.completedDate,
            isRecurring = entity.isRecurring,
            recurringTemplateId = entity.recurringTemplateId,
            autoGenerated = entity.autoGenerated,
            generatedFromPhaseId = entity.generatedFromPhaseId,
            weatherDependent = entity.weatherDependent,
            idealWeatherConditions = entity.idealWeatherConditions?.map {
                WeatherCondition(it.condition, it.temperatureRange, it.precipitationMax)
            },
            notes = entity.notes,
            imageUrls = entity.imageUrls,
            createdAt = entity.createdAt,
            updatedAt = entity.updatedAt
        )
    }

    fun toEntity(domain: Task): TaskEntity {
        return TaskEntity(
            id = domain.id,
            userId = domain.userId,
            title = domain.title,
            description = domain.description,
            taskType = domain.taskType.toEntity(),
            priority = domain.priority.toEntity(),
            dueDate = domain.dueDate,
            dueTime = domain.dueTime,
            isAllDay = domain.isAllDay,
            associatedPlantId = domain.associatedPlantId,
            associatedBedId = domain.associatedBedId,
            completed = domain.completed,
            completedDate = domain.completedDate,
            isRecurring = domain.isRecurring,
            recurringTemplateId = domain.recurringTemplateId,
            autoGenerated = domain.autoGenerated,
            generatedFromPhaseId = domain.generatedFromPhaseId,
            weatherDependent = domain.weatherDependent,
            idealWeatherConditions = domain.idealWeatherConditions?.map {
                WeatherConditionData(it.condition, it.temperatureRange, it.precipitationMax)
            },
            notes = domain.notes,
            imageUrls = domain.imageUrls,
            createdAt = domain.createdAt,
            updatedAt = domain.updatedAt
        )
    }

    // Recurring templates
    fun toDomain(entity: RecurringTaskTemplateEntity): RecurringTaskTemplate { /* ... */ }
    fun toEntity(domain: RecurringTaskTemplate): RecurringTaskTemplateEntity { /* ... */ }

    // Enum conversions
    private fun pl.preclaw.florafocus.data.local.entities.TaskType.toDomain() =
        pl.preclaw.florafocus.domain.model.TaskType.valueOf(this.name)

    private fun pl.preclaw.florafocus.domain.model.TaskType.toEntity() =
        pl.preclaw.florafocus.data.local.entities.TaskType.valueOf(this.name)

    // ... (podobnie dla TaskPriority, RecurrenceFrequency, etc.)
}