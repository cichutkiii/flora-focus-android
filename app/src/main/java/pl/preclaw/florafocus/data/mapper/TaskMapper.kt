package pl.preclaw.florafocus.data.mapper

import pl.preclaw.florafocus.data.local.entities.*
import pl.preclaw.florafocus.data.mapper.TaskMapper.toEntity
import pl.preclaw.florafocus.domain.model.*

object TaskMapper {

    fun toDomain(entity: TaskEntity): Task {
        return Task(
            id = entity.id,
            userId = entity.userId,
            title = entity.title,
            description = entity.description,
            taskType = entity.taskType,           // ✅ Bez .toDomain()
            priority = entity.priority,           // ✅ Bez .toDomain()
            dueDate = entity.dueDate,            // ✅ Bezpośrednio Long
            dueTime = null,                      // ✅ Lub usuń jeśli nie ma w Domain
            isAllDay = false,                    // ✅ Lub usuń jeśli nie ma w Domain
            associatedPlantId = entity.plantId,
            associatedBedId = entity.locationId,
            completed = entity.isCompleted,
            completedDate = entity.completedDate,
            isRecurring = entity.isRecurring,
            recurringTemplateId = entity.generatedByTemplateId,
            // autoGenerated = entity.autoGenerated,  // ❌ Usuń jeśli nie ma w Domain
            generatedFromPhaseId = entity.generatedByPhaseId,
            weatherDependent = entity.weatherDependent,
            idealWeatherConditions = emptyList(),
            notes = entity.completionNotes,      // ✅ Sprawdź nazwę pola w TaskEntity
            imageUrls = entity.afterPhotoUrls ?: emptyList(),
            createdAt = entity.createdAt,
            updatedAt = entity.updatedAt
        )
    }

    fun toEntity(domain: Task): TaskEntity {
        return TaskEntity(
            id = domain.id,
            userId = domain.userId,
            plantId = domain.associatedPlantId,              // ✅ Domain: associatedPlantId → Entity: plantId
            title = domain.title,
            description = domain.description,
            taskType = domain.taskType,
            priority = domain.priority,
            dueDate = domain.dueDate,                        // ✅ Jeśli Domain ma Long
            completedDate = domain.completedDate,
            isCompleted = domain.completed,                  // ✅ Domain: completed → Entity: isCompleted
            isRecurring = domain.isRecurring,

            // Mapowanie nazw pól:
            generatedByTemplateId = domain.recurringTemplateId,    // ✅ Domain: recurringTemplateId → Entity: generatedByTemplateId
            generatedByPhaseId = domain.generatedFromPhaseId, // ✅ Domain: generatedFromPhaseId → Entity: generatedByPhaseId
            weatherDependent = domain.weatherDependent,

            // Lokalizacja:
            locationId = domain.associatedBedId,             // ✅ Domain: associatedBedId → Entity: locationId
            locationName = null,                             // ✅ Ustaw null jeśli Domain nie ma

            // Przypomnienia (jeśli Entity ma):
            reminderEnabled = true,                          // ✅ Wartość domyślna
            reminderTimeBefore = 24,                         // ✅ Wartość domyślna

            // Pola których może nie być w Domain:
            // dueTime, isAllDay - usuń jeśli Entity ich nie ma
            // idealWeatherConditions - usuń jeśli Entity nie ma
            // notes, imageUrls - sprawdź nazwy pól w Entity

            createdAt = domain.createdAt,
            updatedAt = domain.updatedAt
        )
    }
    // Recurring templates
    fun toDomain(entity: RecurringTaskTemplateEntity): RecurringTaskTemplate { /* ... */ return TODO(
        "Provide the return value"
    )
    }
    fun toEntity(domain: RecurringTaskTemplate): RecurringTaskTemplateEntity { /* ... */ return TODO(
        "Provide the return value"
    )
    }

    // Enum conversions
    private fun pl.preclaw.florafocus.data.local.entities.TaskType.toDomain() =
        pl.preclaw.florafocus.domain.model.TaskType.valueOf(this.name)

    private fun pl.preclaw.florafocus.domain.model.TaskType.toEntity() =
        pl.preclaw.florafocus.data.local.entities.TaskType.valueOf(this.name)

    // ... (podobnie dla TaskPriority, RecurrenceFrequency, etc.)
}