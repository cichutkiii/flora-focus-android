package pl.preclaw.florafocus.data.mapper

import pl.preclaw.florafocus.data.local.entities.*
import pl.preclaw.florafocus.domain.model.*

object TaskMapper {

    fun toDomain(entity: TaskEntity): Task {
        return Task(
            id = entity.id,
            userId = entity.userId,
            title = entity.title,
            description = entity.description,
            taskType = entity.taskType.toDomain(),        // ✅ Konwersja
            priority = entity.priority.toDomain(),        // ✅ Konwersja
            dueDate = entity.dueDate,
            dueTime = null,                               // Ustaw domyślną wartość
            isAllDay = false,                             // Ustaw domyślną wartość
            associatedPlantId = entity.plantId,
            associatedBedId = entity.locationId,          // ✅ Mapowanie
            locationId = entity.locationId,               // ✅ DODANE
            locationName = entity.locationName,           // ✅ DODANE
            completed = entity.isCompleted,
            completedDate = entity.completedDate,
            isRecurring = entity.isRecurring,
            recurringTemplateId = entity.generatedByTemplateId,
            isAutoGenerated = entity.autoGenerated,
            generatedFromPhaseId = entity.generatedByPhaseId,
            weatherDependent = entity.weatherDependent,
            idealWeatherConditions = emptyList(),         // Ustaw domyślną wartość
            notes = entity.completionNotes,
            imageUrls = emptyList(),                      // Ustaw domyślną wartość
            createdAt = entity.createdAt,
            updatedAt = entity.updatedAt
        )
    }

    fun toEntity(domain: Task): TaskEntity {
        return TaskEntity(
            id = domain.id,
            userId = domain.userId,
            plantId = domain.associatedPlantId,
            title = domain.title,
            description = domain.description,
            taskType = domain.taskType.toEntity(),        // ✅ Konwersja
            priority = domain.priority.toEntity(),        // ✅ Konwersja
            dueDate = domain.dueDate,
            completedDate = domain.completedDate,
            isCompleted = domain.completed,
            isRecurring = domain.isRecurring,
            generatedByTemplateId = domain.recurringTemplateId,
            autoGenerated = domain.isAutoGenerated,
            generatedByPhaseId = domain.generatedFromPhaseId,
            weatherDependent = domain.weatherDependent,
            locationId = domain.locationId,               // ✅ Mapowanie z domain
            locationName = domain.locationName,           // ✅ Mapowanie z domain
            reminderEnabled = true,                       // Ustaw domyślną wartość
            reminderTimeBefore = 24,                      // Ustaw domyślną wartość
            completionNotes = domain.notes,
            createdAt = domain.createdAt,
            updatedAt = domain.updatedAt
        )
    }

    // ==================== RECURRING TEMPLATES ====================

    fun toDomain(entity: RecurringTaskTemplateEntity): RecurringTaskTemplate {
        return RecurringTaskTemplate(
            id = entity.id,
            userId = entity.userId,
            templateName = entity.name,                   // ✅ Entity: name → Domain: templateName
            taskType = entity.taskType.toDomain(),
            title = entity.name,                          // ✅ Użyj name jako title
            description = entity.description,
            priority = entity.priority.toDomain(),

            // ✅ ROZWIĄZANIE: Używam pełnej ścieżki
            recurrencePattern = pl.preclaw.florafocus.domain.model.RecurrencePattern(
                frequency = entity.recurrencePattern.toDomain(),
                interval = entity.intervalDays,
                daysOfWeek = null,
                dayOfMonth = null,
                timeOfDay = null
            ),

            startDate = entity.startDate,
            endDate = entity.endDate,
            associatedPlantId = null,                     // Entity nie ma tego pola
            associatedBedId = null,                       // Entity nie ma tego pola
            isActive = entity.isActive,
            lastGeneratedDate = entity.lastGeneratedDate,
            createdAt = entity.createdAt,
            updatedAt = entity.updatedAt
        )
    }

    fun toEntity(domain: RecurringTaskTemplate): RecurringTaskTemplateEntity {
        return RecurringTaskTemplateEntity(
            id = domain.id,
            userId = domain.userId,
            name = domain.templateName,                   // ✅ Domain: templateName → Entity: name
            description = domain.description,
            taskType = domain.taskType.toEntity(),
            priority = domain.priority.toEntity(),
            recurrencePattern = domain.recurrencePattern.frequency.toEntity(),  // ✅ Domain RecurrenceFrequency → Entity RecurrencePattern
            intervalDays = domain.recurrencePattern.interval,
            startDate = domain.startDate,
            endDate = domain.endDate,
            isActive = domain.isActive,
            lastGeneratedDate = domain.lastGeneratedDate,
            createdAt = domain.createdAt,
            updatedAt = domain.updatedAt
        )
    }

    // ==================== ENUM CONVERSIONS ====================

    private fun pl.preclaw.florafocus.data.local.entities.TaskType.toDomain() =
        pl.preclaw.florafocus.domain.model.TaskType.valueOf(this.name)

    private fun pl.preclaw.florafocus.domain.model.TaskType.toEntity() =
        pl.preclaw.florafocus.data.local.entities.TaskType.valueOf(this.name)

    private fun pl.preclaw.florafocus.data.local.entities.TaskPriority.toDomain() =
        pl.preclaw.florafocus.domain.model.TaskPriority.valueOf(this.name)

    private fun pl.preclaw.florafocus.domain.model.TaskPriority.toEntity() =
        pl.preclaw.florafocus.data.local.entities.TaskPriority.valueOf(this.name)

    // ✅ Entity RecurrencePattern (ENUM) → Domain RecurrenceFrequency
    private fun pl.preclaw.florafocus.data.local.entities.RecurrencePattern.toDomain() =
        pl.preclaw.florafocus.domain.model.RecurrenceFrequency.valueOf(this.name)

    // ✅ Domain RecurrenceFrequency → Entity RecurrencePattern (ENUM)
    private fun pl.preclaw.florafocus.domain.model.RecurrenceFrequency.toEntity() =
        pl.preclaw.florafocus.data.local.entities.RecurrencePattern.valueOf(this.name)
}